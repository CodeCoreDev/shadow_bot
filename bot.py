import json
import asyncio
from zeroconf.asyncio import AsyncZeroconf
from zeroconf import ServiceBrowser, ServiceListener
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import paho.mqtt.client as mqtt
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MyListener(ServiceListener):
    def __init__(self):
        self.discovered_devices = []

    def add_service(self, zeroconf, type, name):
        logger.info(f"Service {name} of type {type} added")
        info = zeroconf.get_service_info(type, name)
        if info and name.startswith("eShader_"):
            device = {
                "Hostname": info.name,
                "IPAddress": info.parsed_addresses()[0],
                "Services": info.properties,
                "Id": info.name
            }
            self.discovered_devices.append(device)
            logger.info(f"Discovered device: {device}")

    def remove_service(self, zeroconf, type, name):
        pass

    def update_service(self, zeroconf, type, name):
        pass

def read_config():
    try:
        with open('config.json', 'r') as file:
            config = json.load(file)
            required_keys = ["telegram_token", "mqtt_server", "mqtt_port"]
            for key in required_keys:
                if key not in config:
                    raise ValueError(f"Missing required key in config: {key}")
            return config
    except Exception as ex:
        logger.error(f"Error reading config file: {ex}")
        return None

async def discover_devices():
    zeroconf = AsyncZeroconf()
    listener = MyListener()
    browser = ServiceBrowser(zeroconf.zeroconf, "_http._tcp.local.", listener)
    try:
        await asyncio.sleep(20)  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥
    finally:
        await zeroconf.async_close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º zeroconf –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    return listener.discovered_devices

def convert_bytes_to_str(data):
    if isinstance(data, bytes):
        return data.decode("utf-8")
    elif isinstance(data, dict):
        return {convert_bytes_to_str(key): convert_bytes_to_str(value) for key, value in data.items()}
    elif isinstance(data, list):
        return [convert_bytes_to_str(item) for item in data]
    else:
        return data

def connect_to_mqtt(config):
    try:
        client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –≤–µ—Ä—Å–∏–∏ 2
        if config.get("mqtt_user") and config.get("mqtt_password"):
            client.username_pw_set(config["mqtt_user"], config["mqtt_password"])
        client.connect(config["mqtt_server"], config["mqtt_port"], 60)
        logger.info(f"Connected to MQTT broker at {config['mqtt_server']}:{config['mqtt_port']}")
        return client
    except Exception as ex:
        logger.error(f"Failed to connect to MQTT broker: {ex}")
        return None

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ...")
    devices = await discover_devices()
    if devices:
        response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        for device in devices:
            response += f"Hostname: {device['Hostname']}, IP: {device['IPAddress']}\n"
    else:
        response = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    await update.message.reply_text(response)

    config = read_config()
    if config:
        mqtt_client = connect_to_mqtt(config)
        if mqtt_client:
            try:
                devices_cleaned = [convert_bytes_to_str(device) for device in devices]
                mqtt_client.publish("devices/found", json.dumps(devices_cleaned))
                logger.info("–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ MQTT.")
            except Exception as ex:
                logger.error(f"Failed to publish to MQTT: {ex}")
            finally:
                mqtt_client.disconnect()
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É.")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üîç Scan")]], resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîç Scan":
        await scan_command(update, context)

def main():
    config = read_config()
    if not config:
        logger.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.json.")
        return

    application = Application.builder().token(config["telegram_token"]).build()
    application.add_handler(CommandHandler("start", start_command))  # –ö–Ω–æ–ø–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ /start
    application.add_handler(CommandHandler("scan", scan_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "Scan"

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
